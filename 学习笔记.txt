1. http对象
	1.1 创建http
	var http = require("http");
	1.2 创建Server
	用户请求服务时会将信息（request,response）传递到回调函数中
	http.createServer(function(request, response){})
		1.2.1 listen方法，设置服务器监听的端口号
2. response对象
	2.1 writeHead方法，设置返回的状态码以及头信息。 //response.writeHead(200, {"Content-Type":"text/plain"});
	2.2 write方法,想客户端返回文本。
	2.3 end方法，返回结束
	2.3 参数获取
		1.query：接收GET提交参数
		2.body：接收POST提交参数
		3.params：两种都能接收
	2.4 redirect方法，服务器内部跳转
3. exports对象
	3.1 为对象赋值属性，可在其他js文件中调用刚该属性

4.模块
文件模块访问方式通过require('/文件名.后缀')    require('./文件名.后缀')    requrie('../文件名.后缀') 
去访问，文件后缀可以省略；以"/"开头是以绝对路径去加载，以"./"开头和以"../"开头表示以相对路径加载，而以"./"开头表示同级目录下文件，
Nodejs尝试加载的优先级 js文件 > json文件 > node文件

5.ejs模版引擎
	include命令：将指定文件中的内容包括进来

6.crypto加密模块
	//根据指定算法生成hash值
	var md5 = crypto.createHash('MD5');
	//加密
	var en_pwd = md5.update('源文件').digest('hex');
7.session模块
	1.注册：session
	2.清除：
		req.session.destroy();
8.cookies
	1.设置
		request.cookie(name, value, {options: value});
	2.获取
		request.cookies[name];
	3.清除
		request.clearCookie(name);
	4.options
		1.maxAge：设置过期时间，毫秒为单位
9.MySql 模块
	https://github.com/felixge/node-mysql
	https://www.npmjs.org/package/mysql
	1.创建连接: mysql.createConnection(options);
	2.Connection Options：
		host：主机地址 （默认：localhost）
		user：用户名
		password：密码
		port：端口号 （默认：3306）
		database：数据库名
		charset：连接字符集（默认：'UTF8_GENERAL_CI'，注意字符集的字母都要大写）
		localAddress：此IP用于TCP连接（可选）
		socketPath：连接到unix域路径，当使用 host 和 port 时会被忽略
		timezone：时区（默认：'local'）
		connectTimeout：连接超时（默认：不限制；单位：毫秒）
		multipleStatements：是否许一个query中有多个MySQL语句 （默认：false）
		...
	3.打开连接： connection.connect(func); //操作完成后执行回调函数，并传回错误信息对。
	4.执行SQL ： connection.query(sql, params, func);
	5.结束连接： connection.end(),connection.destory(); //end在queries都结束后执行，接收一个回调函数；destory立即执行。
	6.创建连接池： mysql.createPool(options);
	7.Pool options： 在connection的前提下扩充
		waitForConnections：当连接池没有连接或超出最大限制时，设置为true且会把连接放入队列，设置为false会返回error
		connectionLimit：连接数限制，默认：10
		queueLimit：最大连接请求队列限制，设置为0表示不限制，默认：0
	8.连接事件： pool.on('connection', func(connection));
	9.共享连接池使用： pool.getConnection(func(err, connection));
	10.释放： connection.release();
	11.断线重连： connection.connect 方法中判断err参数，并监听on事件。
	12.escape ：防止SQL注入，将用户输入参数值传入即可。

10.formidable 模块
	https://github.com/felixge/node-formidable
	https://www.npmjs.org/package/formidable
	1.创建上传表单对象：formidable.IncomingForm();
	2.对象属性：
		1.encoding：设置字符编码[utf-8]
		2.uploadDir：设置上传文件的默认目录
		3.keepExtensions： 是否保留文件后缀
		4.maxFieldsSize： 设置文件最大值
		5.更多..
	